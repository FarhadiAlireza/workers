// const subLink1 = "https://raw.githubusercontent.com/freefq/free/master/v2"
// const subLink2 = "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"
// const cnfLink1 = "https://raw.githubusercontent.com/mahdibland/ShadowsocksAggregator/master/sub/sub_merge.txt"
// const cleanIPLink = "http://bot.sudoer.net/best.cf.iran.all"
// const operatorList = ["AST", "HWB", "IRC", "MBT", "MCI", "MKB", "PRS", "RTL", "SHT", "ZTL"]
// const addressList = ["discord.com", "cloudflare.com", "nginx.com", "cdnjs.com", "vimeo.com", "networksolutions.com", "spotify.com"]
// const fpList = ["chrome", "chrome", "chrome", "firefox", "safari", "edge", "ios", "android", "random", "random"]
// const alpnList = ["http/1.1", "h2,http/1.1", "h2,http/1.1"]

// export default {
//   async fetch(request) {
//     var url = new URL(request.url)
//     var pathParts = url.pathname.replace(/^\/|\/$/g, "").split("/")
//     if (pathParts[0] == "sub") {
//       var cleanIPs = []
//       if (pathParts[1] !== undefined) {
//         var operator = pathParts[1].toUpperCase()
//         if (operatorList.includes(operator)) {
//           cleanIPs = await fetch(cleanIPLink).then(r => r.text()).then(t => t.split("\n"))
//           cleanIPs = cleanIPs.filter(line => (line.search(operator) > 0))
//           cleanIPs = cleanIPs.map(line => line.split(" ")[0].trim())
//         } else if (isIp(operator)) {
//           cleanIPs = [operator]
//         }
//       }
//       var configList = []
//       configList = configList.concat(await fetch(subLink1).then(r => r.text()).then(a => atob(a)).then(t => t.split("\n")))
//       configList = configList.concat(await fetch(subLink2).then(r => r.text()).then(a => atob(a)).then(t => t.split("\n")))
//       configList = configList.concat(await fetch(cnfLink1).then(r => r.text()).then(t => t.split("\n")))
//       configList = configList.filter(cnf => (cnf.search("vmess://") == 0))
//       configList = configList.map(config => {
//         try {
//           var conf = JSON.parse(atob(config.substr(8)))
//           if (conf.tls != "tls") {
//             throw "no-tls"
//           }
//           var addr = conf.sni
//           if (!addr) {
//             if (conf.add && !isIp(conf.add)) {
//               addr = conf.add
//             } else if (conf.host && !isIp(conf.host)) {
//               addr = conf.host
//             }
//           }
//           if (!addr) {
//             throw "no-tls"
//           }
//           conf.sni = url.hostname
//           if (cleanIPs.length) {
//             conf.add = cleanIPs[Math.floor(Math.random() * cleanIPs.length)]
//           } else {
//             conf.add = addressList[Math.floor(Math.random() * addressList.length)]
//           }
//           conf.host = url.hostname
//           conf.path = "/" + addr + ":" + conf.port + conf.path
//           conf.fp = fpList[Math.floor(Math.random() * fpList.length)]
//           conf.alpn = alpnList[Math.floor(Math.random() * alpnList.length)]
//           conf.port = 443
//           return "vmess://" + btoa(JSON.stringify(conf))
//         } catch (e) {
//           return ""
//         }
//       })
//       configList = getMultipleRandomElements(configList.filter(cnf => (cnf.length > 10)), 100)
//       return new Response(btoa(configList.join("\n")));
//     } else {
//       var url = new URL(request.url)
//       var newUrl = new URL("https://" + url.pathname.replace(/^\/|\/$/g, ''))
//       return fetch(new Request(newUrl, request));
//     }
//   }
// }

// function getMultipleRandomElements(arr, num) {
//   var shuffled = [...arr].sort(() => 0.5 - Math.random());
//   return shuffled.slice(0, num);
// }

// function isIp(str) {
//   try {
//     if (str == "" || str == undefined) return false;
//     if (!/^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){2}\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-4])$/.test(str)) {
//       return false;
//     }
//     var ls = str.split('.');
//     if (ls == null || ls.length != 4 || ls[3] == "0" || parseInt(ls[3]) === 0) {
//       return false;
//     }
//     return true;
//   } catch (ee) { }
//   return false;
// }






/////////////////////////////////////////*******************************************************************//////////////////////////////////////////



// export default {
//   async fetch(request) {
//     var url = new URL(request.url)
//     var pathParts = url.pathname.replace(/^\/|\/$/g, "").split("/")
//     var type = pathParts[0].toLowerCase()
//       const subLinks = ["vless://289e9ecb-7ce7-40d6-c386-af41ae6af669@coffeelover.fthegov.eu.org:2053?type=grpc&serviceName=FtheG&security=tls&fp=chrome&alpn=h2%2Chttp%2F1.1&sni=coffeelover.fthegov.eu.org#VLESS-GRPC-TLS-2053-MTN"]
//       var configListForMci = []
//       var configListForMtn = []
//       const mciIPs = [
//         "104.19.57.4",
//         "104.19.57.222"
//       ]
//       const mtnIPs = [ 
//         "8.208.26.32",
//         "8.208.79.207",
//         "8.208.26.224"
//       ]
//       for (var mciIP of mciIPs) {
//         configListForMci.push(subLinks[0].replace(/(?<=@)[^:]+(?=[:@])/g, mciIP).replace(/#[^&]+/, `#MCI-Config`))    
//       }
//       for (var mtnIP of mtnIPs) {
//             configListForMtn.push(subLinks[0].replace(/(?<=@)[^:]+(?=[:@])/g, mtnIP).replace(/#[^&]+/, `#MTN-Config`))
//       }
//         if(type == "mtn"){
//           const responseMtn = new Response(configListForMtn.join('\n'))  
//           return responseMtn
//         }
//         if(type == "mci") {
//           const responseMci = new Response(configListForMci.join('\n'))
//           return responseMci
//         }  
//       }
//     }

  //////////////////////////////////////*****************************************************//////////////////////////////////////////
  

    //   export default {
    //   async fetch(request) {
    //     var url = new URL(request.url)
    //     var pathParts = url.pathname.replace(/^\/|\/$/g, "").split("/")
    //     var type = pathParts[0].toLowerCase()  
    //     if (type == 'sub') {
    //       var urlParams = new URLSearchParams(url.search)
    // const tkn = urlParams.get('token')     
    // const subLinks = [tkn] 
    // var configList = []
    // if ( subLinks[0] == "http://sub.endoftheline.cloud/subscribe?tkn=fd82ce20d1c10d1e364384060" ) {
    //     subLinks[0] = null
    // }
    //   const cleanIPForVlessGrpcTls = [ 
    //     "8.208.26.32", 
    //     "95.179.250.43", 
    //     "95.179.160.117", 
    //     "108.61.170.104",
    //     "95.179.247.71", 
    //     "8.208.26.224",
    //     "104.19.66.212",
    //     "172.67.213.145",
    //     "172.64.142.114",
    //     "104.21.214.187",
    //     "104.19.23.30",
    //     "104.20.220.1",
    //     "172.67.101.32",
    //     "162.159.255.243",
    //     "172.64.165.106"
    //   ]
    //   const cleanIPForVlessTlsWs = []
    //   const cleanIPForVmess = []

    //   function shuffle(array) {
    //     let currentIndex = array.length, temporaryValue, randomIndex;
    //     while (0 !== currentIndex) {
    //         randomIndex = Math.floor(Math.random() * currentIndex);
    //         currentIndex -= 1;
    //         temporaryValue = array[currentIndex];
    //         array[currentIndex] = array[randomIndex];
    //         array[randomIndex] = temporaryValue;


    //     }
    //     return array;
    // }
    //   for (var subLink of subLinks) { 
    //     try {
    //       configList = configList.concat(await fetch(subLink).then(r => r.text()).then(a => atob(a)).then(t => t.split("\n")))
    //     } catch (e) {}
    //   }
    //   const sni = "kali.fthegov.eu.org"
    //   var countingConfigs = 1
    //   var vmessConfigList = configList.filter(cnf => cnf.search("vmess://") === 0)
    //   var decodingVmessConfigs = vmessConfigList[0]
    //   var decodedVmessConfig = atob(decodingVmessConfigs.replace("vmess://", ""))
    //   var parsedVmessConfig = JSON.parse(decodedVmessConfig)
    //   const encodedVmessConfigs = []
    //   for (var vmessIp of cleanIPForVmess) {
    //         parsedVmessConfig.add = vmessIp
    //         parsedVmessConfig.host = sni
    //         parsedVmessConfig.ps = `Config ${countingConfigs++}`
    //   const encodedVmessConfig = "vmess://" + btoa(JSON.stringify(parsedVmessConfig))
    //         encodedVmessConfigs.push(encodedVmessConfig)
    //         countingConfigs+countingConfigs
    //   }
    //   var countingConfigs = countingConfigs
    //   var vlessConfigList = configList.filter(cnf => cnf.includes("IRANCELL"))
    //   const vlessGrpcTlsIpConfigs = []
    //   const vlessTlsWsIpConfigs = []
    //   for (var vlessGrpcTlsIp of cleanIPForVlessGrpcTls) {
    //     vlessGrpcTlsIpConfigs.push(vlessConfigList[0].replace(/(?<=@)[^:]+(?=[:@])/g, vlessGrpcTlsIp).replace(/sni=[^&]+/, `sni=${sni}`).replace(/#[^&]+/, `#Config ${countingConfigs++} `))
    //     countingConfigs+countingConfigs        
    //   }
    //   var countingConfigs = countingConfigs
    //   for (var vlessTlsWsIp of cleanIPForVlessTlsWs) {
    //         vlessTlsWsIpConfigs.push(vlessConfigList[1].replace(/(?<=@)[^:]+(?=[:@])/g, vlessTlsWsIp).replace(/sni=[^&]+/, `sni=${sni}`).replace(/host=[^&]+/, `host=${sni}`).replace(/#[^&]+/, `#Config ${countingConfigs++} `))
    //         countingConfigs+countingConfigs  
    //   }
    //   var mergingConfigs = [...vlessTlsWsIpConfigs, ...encodedVmessConfigs, ...vlessGrpcTlsIpConfigs]
    //   shuffle(mergingConfigs)
    //   const response = new Response(mergingConfigs.join('\n'))
    //   return response
    // }}}



  
